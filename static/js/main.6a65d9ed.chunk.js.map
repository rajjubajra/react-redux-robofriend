{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","state","fetch","then","response","json","users","setState","this","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6a65d9ed.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField  } from '../action';\n\n\nconst mapStateToProps = (state) => {\n  return{\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>  {\n  return{\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  }  \n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n    }\n  }\n\n  componentDidMount() {\n    //console.log(this.props.store.getState());\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  \n  render() {\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props;\n\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={ onSearchChange }/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    \n    default:\n      return state;\n  }\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots } from './reducers';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <Provider>\n    <App store={store} />\n  </Provider>, \n  document.getElementById('root'));\n  registerServiceWorker();\n"],"sourceRoot":""}